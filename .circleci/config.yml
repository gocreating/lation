version: 2.1
jobs:
  setup_environment_variable:
    docker:
      - image: circleci/python:3.8
    environment:
      # https://circleci.com/docs/2.0/pipeline-variables/#pipeline-values
      CI_PIPELINE_NUMBER: << pipeline.number >>
      CI_PIPELINE_GIT_REVISION: << pipeline.git.revision >>
    steps:
      - checkout
      - run:
          name: Setup Environment Variable
          command: |
            IMAGE_BUILD_NUM=$CI_PIPELINE_NUMBER
            IMAGE_BUILD_HASH=$(echo $CI_PIPELINE_GIT_REVISION | cut -c 1-8)
            TAG=release-$IMAGE_BUILD_NUM-$IMAGE_BUILD_HASH
            mkdir -p ./my-persist-workspace
            touch ./my-persist-workspace/persist-env-var.txt
            echo "export IMAGE_BUILD_NUM=$IMAGE_BUILD_NUM" >> ./my-persist-workspace/persist-env-var.txt
            echo "export IMAGE_BUILD_HASH=$IMAGE_BUILD_HASH" >> ./my-persist-workspace/persist-env-var.txt
            echo "export IMAGE_TAG=$TAG" >> ./my-persist-workspace/persist-env-var.txt
      - persist_to_workspace:
          root: ./my-persist-workspace
          paths:
            - persist-env-var.txt
  prepare_certificates:
    docker:
      - image: circleci/python:3.8
    environment:
      SOURCE_PIPELINE_NUMBER: 48
    steps:
      - checkout
      - restore_cache:
          keys:
            - pip-packages-cache-{{ checksum "lation/requirements.txt" }}
      - run:
          name: Install Dependencies
          command: |
            pip3 install -r lation/requirements.txt
      - save_cache:
          paths:
            - ~/.cache/pip                                      # from `pip3 cache dir`
            - ~/.local/lib/python3.8/site-packages              # from `pip3 list -v`
            - /home/circleci/.local/lib/python3.8/site-packages # from `pip3 list -v`
          key: pip-packages-cache-{{ checksum "lation/requirements.txt" }}
      - run:
          name: Decrypt Google Drive API Credentials
          command: |
            APP=base python lation.py vault \
              --password $VAULT_PASSWORD \
              decrypt \
                --src secrets/google-api-keys/lation-drive.json.encrypted \
                --dest /tmp/lation-drive.json
      - run:
          name: Download Certificates
          command: |
            mkdir -p ./my-persist-workspace/certificates
            APP=base python lation.py google-drive \
                --credential-path /tmp/lation-drive.json \
                download-file \
                    --remote certificates/pipeline-$SOURCE_PIPELINE_NUMBER/$CERTBOT_ROOT_DOMAIN/fullchain1.pem \
                    --local my-persist-workspace/certificates
            APP=base python lation.py google-drive \
                --credential-path /tmp/lation-drive.json \
                download-file \
                    --remote certificates/pipeline-$SOURCE_PIPELINE_NUMBER/$CERTBOT_ROOT_DOMAIN/privkey1.pem \
                    --local my-persist-workspace/certificates
      - persist_to_workspace:
          root: ./my-persist-workspace
          paths:
            - certificates
  release_image:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - attach_workspace:
          at: ./my-persist-workspace
      - setup_remote_docker
      - run:
          name: Retrieve Persisted Environment Variables and Certificates
          command: |
            cat ./my-persist-workspace/persist-env-var.txt >> $BASH_ENV
            cp ./my-persist-workspace/certificates/* ./deploy/certificates
      - run:
          name: Build Docker Image
          command: |
            docker build \
              --build-arg IMAGE_TAG=${IMAGE_TAG} \
              -t gocreating/lation:latest \
              -t gocreating/lation:${IMAGE_TAG} \
              -f ./Dockerfile .
      - run:
          name: Push Docker Image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push gocreating/lation
  # deploy_combo_prod:
  #   docker:
  #     - image: circleci/python:3.8
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ./my-persist-workspace
  #     - run:
  #         name: Retrieve Persisted Environment Variable
  #         command: |
  #           cat ./my-persist-workspace/persist-env-var.txt >> $BASH_ENV
  #     - run:
  #         name: Setup SSH
  #         command: |
  #           # prepare envsubst
  #           sudo apt-get install -y gettext-base

  #           # please transform the private key into base64 format with following command, and save it into ci server's environment variable
  #           # `cat secrets/instance-keys/oracle-cloud | base64 -w 0`
  #           echo $DEPLOY_SERVER_PRIVATE_KEY_BASE64 | base64 -d > /tmp/deploy_server_id_rsa
  #           chmod 400 /tmp/deploy_server_id_rsa
  #     - run:
  #         name: Deploy with SSH
  #         command: |
  #           envsubst < ./deploy/combo/docker-compose.prod.yml > /tmp/docker-compose.prod.yml
  #           cp /tmp/docker-compose.prod.yml ./deploy/combo/docker-compose.prod.yml

  #           scp -o StrictHostKeyChecking=no -i /tmp/deploy_server_id_rsa -pr ./deploy ubuntu@instance-2.lation.app:/home/ubuntu/lation-deploy-combo-$IMAGE_TAG
  #           ssh -o StrictHostKeyChecking=no -i /tmp/deploy_server_id_rsa ubuntu@instance-2.lation.app "sudo docker-compose -f lation-deploy-combo-$IMAGE_TAG/combo/docker-compose.prod.yml up -d"
  #     - run:
  #         name: Cleanup
  #         command: |
  #           rm -rf /tmp/deploy_server_id_rsa
  stock_prod_migrate:
    docker:
      - image: circleci/python:3.8
    parameters:
      generate_revision_script:
        type: boolean
        default: false
      upgrade_database:
        type: boolean
        default: false
      two_phase_revision_upgrade:
        type: boolean
        default: false
      install_data:
        type: boolean
        default: false
    steps:
      - checkout
      - restore_cache:
          keys:
            - pip-packages-cache-{{ checksum "lation/requirements.txt" }}
      - run:
          name: Install Dependencies
          command: |
            pip3 install -r lation/requirements.txt
      - save_cache:
          paths:
            - ~/.cache/pip                                      # from `pip3 cache dir`
            - ~/.local/lib/python3.8/site-packages              # from `pip3 list -v`
            - /home/circleci/.local/lib/python3.8/site-packages # from `pip3 list -v`
          key: pip-packages-cache-{{ checksum "lation/requirements.txt" }}
      - when:
          condition: <<parameters.generate_revision_script>>
          steps:
            - run:
                name: Generate Revision Script
                command: |
                  APP=stock python lation.py migration --url $STOCK_DB_URL revision --force
            - store_artifacts:
                path: ./lation/core/migration/versions
                destination: migrate_versions
      - when:
          condition: <<parameters.upgrade_database>>
          steps:
            - run:
                name: Upgrade Database
                command: |
                  APP=stock python lation.py migration --url $STOCK_DB_URL upgrade
      - when:
          condition: <<parameters.two_phase_revision_upgrade>>
          steps:
            - run:
                name: Two Phase Revision Upgrade Database
                command: |
                  APP=stock python lation.py migration --url $STOCK_DB_URL revision --no-foreign-key --force
                  APP=stock python lation.py migration --url $STOCK_DB_URL upgrade
                  APP=stock python lation.py migration --url $STOCK_DB_URL revision
                  APP=stock python lation.py migration --url $STOCK_DB_URL upgrade
      - when:
          condition: <<parameters.install_data>>
          steps:
            - run:
                name: Install Data
                command: |
                  APP=stock python lation.py db --url $STOCK_DB_URL install-data
  stock_prod_deploy:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - attach_workspace:
          at: ./my-persist-workspace
      - run:
          name: Retrieve Persisted Environment Variable
          command: |
            cat ./my-persist-workspace/persist-env-var.txt >> $BASH_ENV
      - run:
          name: Setup SSH
          command: |
            # prepare envsubst
            sudo apt-get install -y gettext-base

            # please transform the private key into base64 format with following command, and save it into ci server's environment variable
            # `cat secrets/instance-keys/oracle-cloud | base64 -w 0`
            echo $DEPLOY_SERVER_PRIVATE_KEY_BASE64 | base64 -d > /tmp/deploy_server_id_rsa
            chmod 400 /tmp/deploy_server_id_rsa
      - run:
          name: Deploy with SSH
          command: |
            envsubst < ./deploy/stock/docker-compose.prod.yml > /tmp/docker-compose.prod.yml
            cp /tmp/docker-compose.prod.yml ./deploy/stock/docker-compose.prod.yml

            scp -o StrictHostKeyChecking=no -i /tmp/deploy_server_id_rsa -pr ./deploy ubuntu@instance-2.lation.app:/home/ubuntu/lation-deploy-stock-$IMAGE_TAG
            ssh -o StrictHostKeyChecking=no -i /tmp/deploy_server_id_rsa ubuntu@instance-2.lation.app "sudo docker-compose -f lation-deploy-stock-$IMAGE_TAG/stock/docker-compose.prod.yml up -d"
      - run:
          name: Cleanup
          command: |
            rm -rf /tmp/deploy_server_id_rsa
  issue_certificates:
    docker:
      - image: certbot/dns-google:v1.4.0
    environment:
      # https://letsencrypt.org/zh-tw/docs/acme-protocol-updates/#acme-v2-rfc-8555
      # ACME Endpoints:
      # - production: https://acme-v02.api.letsencrypt.org/directory
      # - staging:    https://acme-staging-v02.api.letsencrypt.org/directory
      ACME_SERVER: https://acme-v02.api.letsencrypt.org/directory
    steps:
      - run:
          name: Certbot
          command: |
            # please transform the private key into base64 format with following command, and save it into ci server's environment variable
            # `cat secrets/google-api-keys/lation-cloud-dns-bot.json | base64 -w 0`
            echo $CLOUD_DNS_BOT_SECRET_BASE64 | base64 -d > /tmp/dns-google-credentials.json
            certbot certonly \
              --dns-google \
              --dns-google-credentials /tmp/dns-google-credentials.json \
              --dns-google-propagation-seconds 60 \
              --agree-tos \
              --non-interactive \
              --email $CERTBOT_EMAIL \
              -d $CERTBOT_ROOT_DOMAIN,*.$CERTBOT_ROOT_DOMAIN \
              --server $ACME_SERVER
            mkdir -p ./certbot-workspace
            cp -r /etc/letsencrypt/archive/* ./certbot-workspace
      - store_artifacts:
          path: /etc/letsencrypt/archive
          destination: letsencrypt
      - persist_to_workspace:
          root: ./certbot-workspace
          paths:
            - "*"
      - run:
          name: Cleanup
          command: |
            rm -rf /tmp/dns-google-credentials.json
  upload_certificates_to_google_drive:
    docker:
      - image: circleci/python:3.8
    environment:
      CI_PIPELINE_NUMBER: << pipeline.number >>
    steps:
      - checkout
      - attach_workspace:
          at: ./certbot-workspace
      - restore_cache:
          keys:
            - pip-packages-cache-{{ checksum "lation/requirements.txt" }}
      - run:
          name: Install Dependencies
          command: |
            pip3 install -r lation/requirements.txt
      - save_cache:
          paths:
            - ~/.cache/pip                                      # from `pip3 cache dir`
            - ~/.local/lib/python3.8/site-packages              # from `pip3 list -v`
            - /home/circleci/.local/lib/python3.8/site-packages # from `pip3 list -v`
          key: pip-packages-cache-{{ checksum "lation/requirements.txt" }}
      - run:
          name: Decrypt Google Drive API Credentials
          command: |
            APP=base python lation.py vault \
              --password $VAULT_PASSWORD \
              decrypt \
                --src secrets/google-api-keys/lation-drive.json.encrypted \
                --dest /tmp/lation-drive.json
      - run:
          name: Upload Files
          command: |
            APP=base python lation.py google-drive \
              --credential-path /tmp/lation-drive.json \
              upload-dir \
                --local ./certbot-workspace \
                --remote certificates/pipeline-$CI_PIPELINE_NUMBER
      - run:
          name: Cleanup
          command: |
            rm -rf /tmp/lation-drive.json

workflows:
  version: 2
  build_image_and_deploy_workflow:
    jobs:
      - setup_environment_variable:
          filters:
            branches:
              only: master
      - prepare_certificates:
          filters:
            branches:
              only: master
      - release_image:
          requires:
            - setup_environment_variable
            - prepare_certificates
          filters:
            branches:
              only: master
      # - request_deploy_combo_prod:
      #     type: approval
      #     filters:
      #       branches:
      #         only: master
      # - deploy_combo_prod:
      #     requires:
      #       - request_deploy_combo_prod
      #       - setup_environment_variable
      #       - release_image
      #     filters:
      #       branches:
      #         only: master

      # deploy
      - stock_prod_request_deploy:
          requires:
            - release_image
          type: approval
          filters:
            branches:
              only: master
      - stock_prod_deploy:
          requires:
            - stock_prod_request_deploy
          filters:
            branches:
              only: master

      # migrate revision
      - stock_prod_request_migrate_revision:
          requires:
            - release_image
          type: approval
          filters:
            branches:
              only: master
      - stock_prod_migrate:
          name: stock_prod_migrate_revision
          generate_revision_script: true
          requires:
            - stock_prod_request_migrate_revision

      # migrate revision and upgrade
      - stock_prod_request_migrate_revision_upgrade:
          requires:
            - release_image
          type: approval
          filters:
            branches:
              only: master
      - stock_prod_migrate:
          name: stock_prod_migrate_revision_upgrade
          generate_revision_script: true
          upgrade_database: true
          requires:
            - stock_prod_request_migrate_revision_upgrade

      # migrate two-phase revision and upgrade
      - stock_prod_request_migrate_two_phase_revision_upgrade:
          requires:
            - release_image
          type: approval
          filters:
            branches:
              only: master
      - stock_prod_migrate:
          name: stock_prod_migrate_two_phase_revision_upgrade
          two_phase_revision_upgrade: true
          requires:
            - stock_prod_request_migrate_two_phase_revision_upgrade

      # migrate install data
      - stock_prod_request_migrate_install_data:
          requires:
            - release_image
          type: approval
          filters:
            branches:
              only: master
      - stock_prod_migrate:
          name: stock_prod_migrate_install_data
          install_data: true
          requires:
            - stock_prod_request_migrate_install_data

  renew_tls_certificates_workflow:
    jobs:
      # https://circleci.com/docs/2.0/workflows/#holding-a-workflow-for-a-manual-approval
      - request_issue_certificates:
          type: approval
          filters:
            branches:
              only: master
      - issue_certificates:
          requires:
            - request_issue_certificates
      - upload_certificates_to_google_drive:
          requires:
            - issue_certificates
